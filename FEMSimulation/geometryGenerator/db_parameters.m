function [dbDir,db_params] = db_parameters(PACKAGE_ROOT)
% Create a new database, create parameters for objects. Define parameter
% sets in here.
global CONSTANTS
dbDir =  [ PACKAGE_ROOT '/dataset/models/' CONSTANTS.GEOMETRY.OBJECT_CATEGORY num2str(CONSTANTS.GEOMETRY.SAMPLING) '/' ];

db_file = [ dbDir 'db.mat' ];
display(['DB dir: ', dbDir]); 

if ~exist(dbDir, 'dir')
    mkdir(dbDir); end
if exist(db_file, 'file')
    warning(['DB file ' db_file ' exists and will be updated!']);
else
    created = datestr(now);
    save(db_file, 'created'); end

names1 = { 'type', 'class', 'name', 'filename', 'err' };
names2 = { 'id' 'h' 'r1' 'r2' 'thick' 'res' 'rim', 'symmetric','flat' 'dent', 'enclosed', ...
    'p_1' 'p_2' 'p_3' 'p_4' 'p_5' 'p_6' 'p_7' 'p_8' 'p_9' 'p_10' 'p_11' 'p_12' };  

% ranges:  {  { <ParamName>_[<ParamIndex>], <#Samples>, <MinValue>, <MaxValue>},
%             { <ParamName>_<ParamIndex>, { <specific values> } }, 
%             { <ParamName>_<ParamIndex>,  <specific value>  }     } }
objs = {}; objs1 = {};

switch CONSTANTS.GEOMETRY.OBJECT_CATEGORY
    %%%%%%%%%%%% Real objects, set A %%%%%%%%%%%%
    case { 'Ademo', 'A' }
        res = CONSTANTS.GEOMETRY.SAMPLING;     % Use CONSTANTS.GEOMETRY.SAMPLING for spatial resolution
        sampling = 1;       % Factor for parameter sampling
        if strcmp(CONSTANTS.GEOMETRY.OBJECT_CATEGORY, 'Ademo') 
            s = 0; 
        else
            s = 3; 
        end
        
        % nu is 0.03 here!!
        %defaults = struct('thick', 0.5, 'res', res, 'tri_select', 0, 'push_features', push_features, ...
        %    'material_e', 4e7, 'material_nu',0.03, 'material_density', 1350);
        defaults = struct('thick', 0.5, 'res', res);
        % - W5 Edelstahlreiniger. ??: Thickness
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'w5edel', ...
        'ranges', { { { 'h' 150 },  { 'r1' s 30 40  }, { 'r2' 20 }, { 'thick' 0.3}, ...
                { 'p_1' 0.6}, { 'p_2' s -0.25 -0.15 }, ...
                { 'p_9' 0.1 },  { 'p_10' 0.4 }, { 'p_11' 0.1 }, ... % Neck: height, radius, curvature below neck
                { 'rim', {0, 1} } ...
               } });
        objs1{end+1} = objs{end};
        % - Lidl smoothie 250ml. ??: Thickness
        % Good smoothies:
        %      thick=0.6, p_4=0.2, rim=0/1
        %objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'smoothie', ...
        %'ranges', { { { 'h' 150 },  { 'r1' 22  }, { 'thick' 0.2 }, ...
        %        { 'p_1' 0.6 }, { 'p_2' -0.1 }, { 'p_3' 0.25 }, { 'p_4' 0.1 }, ...
        %        { 'p_9' 0.05 },  { 'p_10' 0.8 }, { 'p_11', 0.01 }, ...
        %        { 'rim', {0, 1} } ...
        %       } });
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'smoothie', ...
        'ranges', { { { 'h' 150 },  { 'r1' s 17 27  }, { 'thick' 0.4 }, ...
                { 'p_1' 0.6 }, { 'p_2' s -0.1 -0.2 }, { 'p_3' 0.25 }, { 'p_4' s 0.15 0.25 }, ...
                { 'p_9' 0.05 },  { 'p_10' 0.8 }, { 'p_11', 0.01 }, ...
                { 'rim', {0, 1} } ...
               } });
        % - Cien Duschgel, asym. curved 
        % Comment CIEN because can not generate non-symmetric geometry yet.
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'cien', ...
        'ranges', { { { 'h' s 120 150 },  { 'r1' s 30 40  }, { 'r2' 20 }, { 'thick' s 0.4 0.6 }, ...
                { 'p_1' 1.0}, { 'p_2' 0 },...
                { 'p_12' s 0.1 0.3}, ...
                { 'rim', {0,1} } ...
               } });
        objs1{end+1} = objs{end};
        % - Isana Duschgel. Small concavity at center
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'isana', ...
        'ranges', { { { 'h' 120 },  { 'r1' s 30 40  }, { 'r2' 20 }, { 'thick' 0.5 }, ...
                { 'p_1' 0.3}, { 'p_2' 0 }, { 'p_3' s 0.5 0.7}, { 'p_4' s 0.1 0.25 },...
                { 'p_5' 0.1}, { 'p_6' 0 }, ...
                { 'rim', {0,1} } ...
               } });
        % - Simple elliptic bottle
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'elliptic', ...
        'ranges', { { { 'h' 135 },  { 'r1' s 30 40  }, { 'r2' s 15 20 }, { 'thick' 0.4}, { 'rim', {0,1} }, ...
                { 'p_1' 1.0}, { 'p_2' 0.0 } ...
               } });
        % - Seife Marseillais. ??: Thickness?
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'soap', ...
        'ranges', { { { 'h' s 100 140 },  { 'r1' s 30 40 }, { 'r2' 27 }, { 'thick' 0.4 }, ...
                { 'p_1' s 0.6 0.8}, { 'p_2' 0 }, ...
                { 'p_9' 0.08 },  { 'p_10' 0.4 }, { 'p_11' 0.1 }, ...
                { 'rim', {0,1} } ...
               } });
        % - Plastikbecher, blau transparent. ?? Thickness
        objs{end+1} = struct('type', 'bowl', 'class', 'cleaner', 'name', 'cupbl', ...
        'ranges', { { { 'h' 70 },  { 'r1' s 30 40  }, { 'thick' 0.2 }, ...
                { 'p_1' s 0.6 0.8}, ...
                { 'rim', {0, 1} } ...
               } });
        % - Alpecin bottle
        % TBD! This is very coarse approx. by a standard bottle with dent
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'bottle-dent', ...
        'ranges', { { { 'h' s 120 150 },  { 'r1' 30  }, { 'thick' s .3 .7 }, { 'rim', {0,1} }, ...
                { 'p_1' s 0.7 0.85 }, ...
                { 'p_9' 0.1 },  { 'p_10' 0.4 }, { 'p_11' 0.0 }, ...
                { 'dent', s 0.4 0.6  } ...
               } });
        % - Palmolive shower gel
        objs{end+1} = struct('type', 'bowl', 'class', '', 'name', 'palmol', ...
        'ranges', { { { 'h'  120 },  { 'r1' s 30 40  }, { 'r2' 15  }, { 'thick' 0.5 }, { 'rim', {0,1} }, ...
                { 'p_1' s 0.60 0.75}, { 'p_2' s 0.3 0.5 }, ...
               } });
%         objs1{end+1} = objs{end};

        % - Simple cylindric bottle
        objs{end+1} = struct('type', 'bowl', 'class', '', 'name', 'cylindric', ...
        'ranges', { { { 'h'  120 },  { 'r1' s 30 40  }, { 'thick' 0.2}, { 'rim', {0,1} }, ...
                { 'p_1' 1.0}, { 'p_2' 0.0 }, ...
               } });
        % - Simple linear, conic bottle
        objs{end+1} = struct('type', 'bowl', 'class', '', 'name', 'conicdec', ...
        'ranges', { { { 'h' 140 },  { 'r1' s 12 18 }, { 'thick' 0.2 }, { 'rim', {0,1} }, ...
                { 'p_1' s 1.7 2.3}, { 'p_2' 0.0 }, ...
               } });
        objs{end+1} = struct('type', 'bowl', 'class', '', 'name', 'conicinc', ...
        'ranges', { { { 'h' 140 },  { 'r1' s 12 18 },  { 'thick' 0.2 }, { 'rim', {0,1} }, ...
                { 'p_1' s 0.3 0.7}, { 'p_2' 0.0 }, ...
               } });
        % - Simple "normal" bottle (wie Adelholzener)
        objs{end+1} = struct('type', 'bottle-gen', 'class', 'bottles', 'name', 'bottle', ...
        'ranges', { { { 'r1' s3 25 35 }, { 'h', 200 },  { 'thick'  0.3 }, { 'rim', {0,1} }, ...
                { 'p_1',  s3 0.6 0.75 }, ...
                { 'p_9' 0.05 },  { 'p_10' 0.3 }, { 'p_11' s3 0.2 0.3 }, ... % Neck: height, radius, curvature below neck
                } });
            
            
        % - Asymmetric object, CIEN  
%         objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'cien', ...
%         'ranges', { { { 'h' s 120 150 },  { 'r1' s 30 40  }, { 'r2' 20 }, { 'thick' s 0.4 0.6 }, ...
%                 { 'p_1' 1.0}, { 'p_2' 0 },...
%                 { 'p_12' s 0.1 0.3}, ...
%                 { 'rim', {0,1} } ...
%                } });
%         objs1{end+1} = objs{end};  
    case {'AdemoThick','AThick' }
        res = CONSTANTS.GEOMETRY.SAMPLING;     % Use CONSTANTS.GEOMETRY.SAMPLING for spatial resolution
        sampling = 1;       % Factor for parameter sampling
        if strcmp(CONSTANTS.GEOMETRY.OBJECT_CATEGORY, 'AdemoThick') 
            s = 0; 
            s2 = 0;
            s3 = 0;
        else
            s = 2; 
            s2 = 2;
            s3 = 3;
        end

        % nu is 0.03 here!!
        %defaults = struct('thick', 0.5, 'res', res, 'tri_select', 0, 'push_features', push_features, ...
        %    'material_e', 4e7, 'material_nu',0.03, 'material_density', 1350);
        defaults = struct('thick', 0.5, 'res', res);
        % - W5 Edelstahlreiniger. ??: Thickness
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'w5edel', ...
        'ranges', { { { 'h' 150 },  { 'r1' 40}, { 'r2' s2 20 36}, { 'thick' 0.3}, ...
                { 'p_1' 0.6}, { 'p_2' s2 -0.15 -0.25}, ...
                { 'p_9' 0.1 },  { 'p_10'  0.4}, { 'p_11' 0.1 }, ... % Neck: height, radius, curvature below neck
                { 'rim', {0} } ...
               } });
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'smoothie', ...
        'ranges', { { { 'h' 150 },  { 'r1' s3 30 50 }, { 'thick' 0.4 }, ...
                { 'p_1' 0.6 }, { 'p_2' -0.1}, { 'p_3' 0.25 }, { 'p_4' 0.15}, ...
                { 'p_9' 0.05 },  { 'p_10' 0.8 }, { 'p_11', 0.01 }, ...
                { 'rim', {0} } ...
               } });
        % - Simple elliptic bottle
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'elliptic', ...
        'ranges', { { { 'h' 50 },  { 'r1' 40 }, { 'r2' s2 20 28 }, { 'thick' 0.4}, { 'rim', {0} }, ...
                { 'p_1' 1.0}, { 'p_2' 0.0 } ...
               } });
        % - Plastikbecher, blau transparent. ?? Thickness
        objs{end+1} = struct('type', 'bowl', 'class', 'cleaner', 'name', 'cupbl', ...
        'ranges', { { { 'h' 70 },  { 'r1' s2 30 36  }, { 'thick' 0.2 }, ...
                { 'p_1' 0.6}, ...
                { 'rim', {0} } ...
               } });
        % - Palmolive shower gel
        objs{end+1} = struct('type', 'bowl', 'class', '', 'name', 'palmol', ...
        'ranges', { { { 'h'  120 },  { 'r1' 40}, { 'r2' s2 20 36}, { 'thick' 0.5 }, { 'rim', {0} }, ...
                { 'p_1' 0.60 }, { 'p_2' 0.3 }, ...
               } });
        % - Simple "normal" bottle (wie Adelholzener)
        objs{end+1} = struct('type', 'bottle-gen', 'class', 'bottles', 'name', 'bottle', ...
        'ranges', { { { 'r1' s3 30 60 }, { 'h', 100 },  { 'thick'  0.3 }, { 'rim', {0} }, ...
                { 'p_1',  0.6}, ...
                { 'p_9' 0.05 },  { 'p_10' 0.3 }, { 'p_11' 0.2}, ... % Neck: height, radius, curvature below neck
                 } });
        % - Asymmetric bottle cien
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'cien', ...
        'ranges', { { { 'h' 80 },  { 'r1' 40  }, { 'r2'  20  }, { 'thick' 0.4 }, ...
                { 'p_1' s2 0.5 1.0}, { 'p_2' s2 0 0.1 },...
                { 'p_12' s2 0.1 0.3}, ...
                { 'rim', 0} ...
               } });
        objs1{end+1} = objs{end};       
%%%%%% EllipticalCylinder %%%%%%

    case { 'EllipticalCylinder'}
        % - Simple elliptic bottle
        res = CONSTANTS.GEOMETRY.SAMPLING;     % Use CONSTANTS.GEOMETRY.SAMPLING for spatial resolution
        sampling = 1;       % Factor for parameter sampling
        s = 14;
        
        % nu is 0.03 here!!
%         defaults = struct('thick', 0.5, 'res', res, 'tri_select', 0, 'push_features', push_features, ...
%             'material_e', 4e7, 'material_nu',0.03, 'material_density', 1350);
        defaults = struct('thick', 0.5, 'res', res, 'tri_select');
        
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'elliptic', ...
        'ranges', { { { 'h' 135 },  { 'r1' s 30 4  }, { 'r2' 10 }, { 'thick' 0.4}, { 'rim', {0} }, ...
                { 'p_1' 1.0}, { 'p_2' 0.0 } ...
               } });

 
        
%%%%%% CIEN, asymetric objects
    case { 'Asymmetric' }
        s = 2;
        res = CONSTANTS.GEOMETRY.SAMPLING;   % Use sampling for spatial resolution
        sampling = 1;  
        defaults = struct('thick', 0.5, 'res', res);
        objs{end+1} = struct('type', 'bottle-gen', 'class', '', 'name', 'cien', ...
        'ranges', { { { 'h' s 120 150 },  { 'r1' s 30 40  }, { 'r2' 20 }, { 'thick' s 0.4 0.6 }, ...
                { 'p_1' 1.0}, { 'p_2' 0 },...
                { 'p_12' s 0.1 0.3}, ...
                { 'rim', {0,1} } ...
               } });
        objs1{end+1} = objs{end};       
otherwise
        display('Dataset name unknown');
        return

end          


% Create all combinations to enumerate instances as a table type
mktable = @(n) [ cell2table(cell(n, length(names1)), 'VariableNames', names1), ...
    array2table(zeros(n, length(names2)), 'VariableNames', names2) ];
db_params = mktable(0);
for io = 1:length(objs)
    co = objs{io};
    [pnames, pvals] = create_combinations(co.ranges, sampling);
    n = size(pvals, 1);
    id = 1:n;
    
    % Table rows, equal for all current instances
    cp = mktable(n);
    cp(:, 'type') = {{co.type}};
    cp(:, 'class') = {{ co.class }};
    
    % Copy the parameter values
    cp.id = id';
    cp{:, pnames} = pvals;
    % Defaults
    if ~ismember('r2', pnames)
        cp.r2 = cp.r1; end
    for fn = fieldnames(defaults)'
        if ~ismember(fn, pnames) && ismember(fn, names2)
            cp{:, fn} =  defaults.(fn{1}); end
    end

    % Object name
    cp(:, 'name') = {{ co.name }};
    cp(:,'symmetric') = mat2cell(cp.r1 == cp.r2,ones(1,n));

    cnd = cp.rim > 0;
    cp{cnd, 'name'} = strcat(cp{cnd, 'name'}, repmat({'-rim'}, sum(cnd), 1));
    cnd = cp.enclosed > 0;
    cp{cnd, 'name'} = strcat(cp{cnd, 'name'}, repmat({'-encl'}, sum(cnd), 1));
    
    % Set model filenames
    cp(:, 'filename') = arrayfun(@(n) ... % New naming scheme
        {{sprintf('%04d_%s_%s_%03dx%03dx%03d-%02.0f', n+height(db_params), cp.type{n}, cp.name{n}, ...
        cp.h(n), cp.r1(n), cp.r2(n), 10*cp.thick(n))}}, id)';
    %cp(:, 'filename') = arrayfun(@(n) ...
    %    {{sprintf('%s-%s-%03dx%03dx%03d-%02.0f-#%04d', cp.type{n}, cp.name{n}, ...
    %    cp.h(n), cp.r1(n), cp.r2(n), 10*cp.thick(n), n+height(db_params))}}, id)';
    
    db_params = [ db_params ; cp ];
    fprintf('%15s,%15s: %5d\n', co.type, co.name, n);
end

save(db_file, 'db_params', '-append');
save(db_file, 'defaults', '-append');
            
return

function [names, val_combinations] = create_combinations(ranges, sampling)
    l = length(ranges);
    values = cell(1, l);
    names  = cell(1, l);
    for ir = 1:length(ranges)
        cr = ranges{ir};
        names{ir} = cr{1};
        if iscell(cr{2}) && length(cr) == 2       % Specific values given as cell
            values{ir} = cell2mat(cr{2});
        elseif ismatrix(cr{2}) && length(cr) == 2 % Specific values given as matrix (prefered)
            values{ir} = cr{2};
        else                    % Linspace (or mean)
            if sampling == 0 || cr{2} == 0
                values{ir} = mean([ cr{3}, cr{4} ]);
            else
                values{ir} = linspace(cr{3}, cr{4}, cr{2} * sampling);
            end
        end
    end
    
    % Create all combinations
    c = cell(1,l);
    [ c{:} ] = ndgrid(values{:});
    val_combinations = cell2mat(cellfun(@(v)v(:), c, 'UniformOutput', false));
    
    val_combinations = sortrows(val_combinations, 1:size(val_combinations, 2));
return;

